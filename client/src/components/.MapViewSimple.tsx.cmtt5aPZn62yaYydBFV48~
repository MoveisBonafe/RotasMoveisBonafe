import { useState, useEffect, useRef } from "react";
import { Location, PointOfInterest } from "@/lib/types";

declare global {
  interface Window {
    google: any;
    initMap: () => void;
  }
}

// Construção de URL para o mapa estático
const GOOGLE_MAPS_API_KEY = import.meta.env.VITE_GOOGLE_MAPS_API_KEY || "";

interface MapViewSimpleProps {
  origin: Location | null;
  waypoints: Location[];
  calculatedRoute: Location[] | null;
  onRouteCalculated?: (result: any) => void;
  pointsOfInterest?: PointOfInterest[];
}

export default function MapViewSimple({ 
  origin,
  waypoints,
  calculatedRoute,
  onRouteCalculated,
  pointsOfInterest = []
}: MapViewSimpleProps) {
  const [mapSrc, setMapSrc] = useState<string>("");
  const [isMapReady, setIsMapReady] = useState<boolean>(false);
  
  // Criar URL para mapa estático
  const createMapUrl = (mapType = "roadmap") => {
    // URL base
    const baseUrl = "https://www.google.com/maps/embed/v1/place";
    
    // Localização padrão - Dois Córregos, SP
    const center = "-22.3673,-48.3823";
    
    // Parâmetros
    const params = new URLSearchParams({
      key: GOOGLE_MAPS_API_KEY,
      q: center,
      zoom: "13",
      maptype: mapType
    });
    
    return `${baseUrl}?${params.toString()}`;
  };
  
  // Atualizar o iframe quando as propriedades mudarem
  useEffect(() => {
    if (origin) {
      // Se tivermos waypoints, mostrar o mapa com todos os pontos
      if (waypoints && waypoints.length > 0) {
        try {
          // Centralizar o mapa para incluir todos os pontos
          let sumLat = parseFloat(origin.lat);
          let sumLng = parseFloat(origin.lng);
          let minLat = parseFloat(origin.lat);
          let maxLat = parseFloat(origin.lat);
          let minLng = parseFloat(origin.lng);
          let maxLng = parseFloat(origin.lng);
          
          // Calcular centro e limites
          waypoints.forEach(wp => {
            const lat = parseFloat(wp.lat);
            const lng = parseFloat(wp.lng);
            
            sumLat += lat;
            sumLng += lng;
            
            minLat = Math.min(minLat, lat);
            maxLat = Math.max(maxLat, lat);
            minLng = Math.min(minLng, lng);
            maxLng = Math.max(maxLng, lng);
          });
          
          // Calcular o centro médio
          const centerLat = sumLat / (waypoints.length + 1);
          const centerLng = sumLng / (waypoints.length + 1);
          
          // Calcular zoom baseado na diferença
          const latDiff = maxLat - minLat;
          const lngDiff = maxLng - minLng;
          const maxDiff = Math.max(latDiff, lngDiff);
          
          // Ajustar zoom conforme a distância
          let zoom = 12;
          if (maxDiff > 0.5) zoom = 10;
          if (maxDiff > 1) zoom = 9;
          if (maxDiff > 2) zoom = 8;
          if (maxDiff > 4) zoom = 7;
          
          // Criar URL para direções
          const baseUrl = "https://www.google.com/maps/embed/v1/directions";
          
          // Primeiro, montar a URL com origem e destino
          const originParam = `${origin.lat},${origin.lng}`;
          
          // O último waypoint é o destino quando temos rota calculada
          const destinationWaypoint = calculatedRoute && calculatedRoute.length > 1 
            ? calculatedRoute[calculatedRoute.length - 1] 
            : waypoints[waypoints.length - 1];
            
          const destinationParam = `${destinationWaypoint.lat},${destinationWaypoint.lng}`;
          
          // Pontos intermediários - excluir o último que já é o destino
          const waypointsParams = calculatedRoute && calculatedRoute.length > 2
            ? calculatedRoute.slice(1, -1).map(wp => `${wp.lat},${wp.lng}`).join('|')
            : waypoints.slice(0, -1).map(wp => `${wp.lat},${wp.lng}`).join('|');
            
          // Montar parâmetros
          const params = new URLSearchParams({
            key: GOOGLE_MAPS_API_KEY,
            origin: originParam,
            destination: destinationParam,
            mode: "driving",
            avoid: "ferries"
          });
          
          // Adicionar waypoints se tivermos
          if (waypointsParams) {
            params.append("waypoints", waypointsParams);
          }
          
          // Montar a URL final
          const directionsUrl = `${baseUrl}?${params.toString()}`;
          setMapSrc(directionsUrl);
          
          console.log("Mapa configurado para mostrar rota calculada (iframe)");
        } catch (error) {
          console.error("Erro ao atualizar mapa iframe:", error);
        }
      } else {
        // Se não tivermos destinos, apenas mostrar a origem
        const baseUrl = "https://www.google.com/maps/embed/v1/place";
        const params = new URLSearchParams({
          key: GOOGLE_MAPS_API_KEY,
          q: `${origin.lat},${origin.lng}`,
          zoom: "13",
          maptype: "roadmap"
        });
        
        setMapSrc(`${baseUrl}?${params.toString()}`);
      }
    }
  }, [origin, waypoints, calculatedRoute]);
  
  return (
    <div className="flex-1 relative h-full">
      {/* Interface simplificada apenas com iframe */}
      <div className="h-full w-full relative rounded-xl overflow-hidden shadow-xl border border-blue-100" style={{ minHeight: '500px' }}>
        {/* Usando apenas iframe para garantir compatibilidade */}
        <iframe
          className="w-full h-full border-0 rounded-xl"
          style={{ 
            minHeight: '500px',
            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'
          }}
          loading="lazy"
          allowFullScreen
          referrerPolicy="no-referrer-when-downgrade"
          src={mapSrc || createMapUrl("roadmap")}
          title="Google Maps"
        ></iframe>
          
        {/* Legenda para os pontos no mapa */}
        {(waypoints && waypoints.length > 0) && (
          <div className="absolute bottom-4 left-4 bg-white rounded-md shadow-md p-2 z-10 max-w-xs">
            <h3 className="text-sm font-semibold mb-2">Pontos no mapa:</h3>
            <div className="flex flex-col space-y-1 text-xs">
              <div className="flex items-center">
                <span className="inline-flex items-center justify-center bg-blue-500 text-white rounded-full w-5 h-5 mr-2">A</span>
                <span>Origem: {origin?.name || 'Dois Córregos'}</span>
              </div>
              {calculatedRoute && calculatedRoute.length > 1 ? (
                // Mostrar pontos da rota calculada
                calculatedRoute.slice(1).map((point, index) => (
                  <div key={`route-${index}`} className="flex items-center">
                    <span className={`inline-flex items-center justify-center ${
                      index === calculatedRoute.length - 2 
                        ? "bg-green-500" // Último ponto (destino)
                        : "bg-orange-500" // Pontos intermediários
                    } text-white rounded-full w-5 h-5 mr-2`}>
                      {index === calculatedRoute.length - 2 ? "B" : (index + 1).toString()}
                    </span>
                    <span>{point.name}</span>
                  </div>
                ))
              ) : (
                // Mostrar waypoints sem otimização
                waypoints.map((point, index) => (
                  <div key={`waypoint-${index}`} className="flex items-center">
                    <span className={`inline-flex items-center justify-center ${
                      index === waypoints.length - 1 
                        ? "bg-green-500" // Último ponto (destino)
                        : "bg-orange-500" // Pontos intermediários
                    } text-white rounded-full w-5 h-5 mr-2`}>
                      {index === waypoints.length - 1 ? "B" : (index + 1).toString()}
                    </span>
                    <span>{point.name}</span>
                  </div>
                ))
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}