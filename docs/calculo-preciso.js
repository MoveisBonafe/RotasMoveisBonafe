/**
 * C√°lculo Preciso de Rotas
 * 
 * Este script garante que o mesmo m√©todo de c√°lculo seja usado para todas as rotas,
 * tornando a compara√ß√£o entre rotas normal e otimizada precisa e consistente.
 * 
 * - Captura o algoritmo usado pelo bot√£o "Visualizar" (considerado o mais preciso)
 * - Aplica o mesmo m√©todo de c√°lculo para rotas otimizadas
 * - Mostra sempre valores reais e consistentes de dist√¢ncia e tempo
 */
(function() {
  console.log("üßÆ [CalculoPreciso] Iniciando sistema de c√°lculo preciso");
  
  // Rastrear as localiza√ß√µes e a ordem atual
  let localizacoes = [];
  let rotaOriginal = [];
  let rotaOtimizada = [];
  
  // M√©tricas calculadas pelo m√©todo preciso
  let metricasNormal = null;
  let metricasOtimizada = null;
  
  // Interceptar API do Google Maps para capturar calculadora de rotas
  let directionsService = null;
  let directionsRenderer = null;
  
  // Inicializar quando a p√°gina estiver carregada
  window.addEventListener('load', inicializar);
  setTimeout(inicializar, 1000);
  setTimeout(inicializar, 3000);
  
  function inicializar() {
    console.log("üßÆ [CalculoPreciso] Configurando interceptadores");
    
    // Encontrar os bot√µes de visualiza√ß√£o e otimiza√ß√£o
    const botaoVisualizar = document.getElementById('visualize-button');
    const botaoOtimizar = document.getElementById('optimize-button');
    
    if (!botaoVisualizar || !botaoOtimizar) {
      console.log("üßÆ [CalculoPreciso] Bot√µes ainda n√£o dispon√≠veis");
      return;
    }
    
    // Interceptar o servi√ßo de dire√ß√µes do Google Maps
    interceptarGoogleMaps();
    
    // Interceptar a lista de localiza√ß√µes para acompanhar pontos
    rastrearLocalizacoes();
    
    // Interceptar cliques nos bot√µes
    interceptarBotao(botaoVisualizar, 'visualizar');
    interceptarBotao(botaoOtimizar, 'otimizar');
    
    // Observer para mudan√ßas na exibi√ß√£o de informa√ß√µes
    observarInformacoesRota();
    
    console.log("üßÆ [CalculoPreciso] Configura√ß√£o conclu√≠da");
  }
  
  // Interceptar o servi√ßo de dire√ß√µes do Google Maps
  function interceptarGoogleMaps() {
    // Verificar se o Google Maps est√° dispon√≠vel
    if (!window.google || !window.google.maps) {
      console.log("üßÆ [CalculoPreciso] Google Maps n√£o dispon√≠vel");
      return;
    }
    
    // Tentar encontrar ou monitorar o servi√ßo de dire√ß√µes
    if (window.directionsService) {
      directionsService = window.directionsService;
      console.log("üßÆ [CalculoPreciso] Servi√ßo de dire√ß√µes encontrado");
    }
    
    // Interceptar a cria√ß√£o do servi√ßo de dire√ß√µes
    const originalDirectionsService = window.google.maps.DirectionsService;
    window.google.maps.DirectionsService = function() {
      directionsService = new originalDirectionsService();
      
      // Interceptar m√©todo de rota
      const originalRoute = directionsService.route;
      directionsService.route = function(request, callback) {
        console.log("üßÆ [CalculoPreciso] Interceptando c√°lculo de rota:", request);
        
        // Chamar a fun√ß√£o original
        return originalRoute.call(this, request, function(result, status) {
          // Processar resultados
          if (status === 'OK') {
            processarResultadoRota(request, result);
          }
          
          // Retornar para a fun√ß√£o original
          if (callback) callback(result, status);
        });
      };
      
      return directionsService;
    };
    
    // Interceptar o DirectionsRenderer tamb√©m
    const originalDirectionsRenderer = window.google.maps.DirectionsRenderer;
    window.google.maps.DirectionsRenderer = function(opts) {
      directionsRenderer = new originalDirectionsRenderer(opts);
      
      // Interceptar m√©todo setDirections
      const originalSetDirections = directionsRenderer.setDirections;
      directionsRenderer.setDirections = function(result) {
        console.log("üßÆ [CalculoPreciso] Interceptando renderiza√ß√£o de rota");
        
        // Processar o resultado sendo renderizado
        processarResultadoRota(null, result);
        
        // Chamar o m√©todo original
        return originalSetDirections.call(this, result);
      };
      
      return directionsRenderer;
    };
    
    console.log("üßÆ [CalculoPreciso] Intercepta√ß√£o do Google Maps configurada");
  }
  
  // Rastrear as localiza√ß√µes adicionadas
  function rastrearLocalizacoes() {
    // Verificar periodicamente a lista de localiza√ß√µes
    setInterval(function() {
      // Verificar se a vari√°vel global locations existe
      if (window.locations && Array.isArray(window.locations)) {
        localizacoes = window.locations.slice();
        console.log("üßÆ [CalculoPreciso] Localiza√ß√µes atualizadas:", localizacoes.length);
      }
    }, 2000);
  }
  
  // Interceptar cliques nos bot√µes
  function interceptarBotao(botao, tipo) {
    const clickOriginal = botao.onclick;
    
    botao.onclick = function(event) {
      console.log(`üßÆ [CalculoPreciso] Bot√£o ${tipo} clicado`);
      
      // Registrar o tipo de rota sendo calculada
      window.tipoRotaAtual = tipo;
      
      // Executar o comportamento original
      if (clickOriginal) {
        clickOriginal.call(this, event);
      }
      
      // Ap√≥s um tempo, verificar se precisamos atualizar as informa√ß√µes
      setTimeout(function() {
        atualizarInformacoesRota(tipo);
      }, 2000);
    };
  }
  
  // Processar resultado de rota do Google Maps
  function processarResultadoRota(request, result) {
    try {
      // Verificar se o resultado √© v√°lido e tem rotas
      if (!result || !result.routes || !result.routes.length) {
        console.log("üßÆ [CalculoPreciso] Resultado sem rotas");
        return;
      }
      
      // Verificar que tipo de rota est√° sendo calculada
      const tipoRota = window.tipoRotaAtual || 'desconhecido';
      console.log(`üßÆ [CalculoPreciso] Processando resultado de rota ${tipoRota}`);
      
      // Extrair a ordem dos waypoints
      const waypointOrder = result.routes[0].waypoint_order || [];
      
      // Extrair as pernas da rota
      const legs = result.routes[0].legs || [];
      
      // Calcular dist√¢ncia e tempo totais
      let distanciaTotal = 0;
      let tempoTotal = 0;
      
      legs.forEach(leg => {
        distanciaTotal += leg.distance.value;
        tempoTotal += leg.duration.value;
      });
      
      // Converter para formatos leg√≠veis
      const distanciaKm = (distanciaTotal / 1000).toFixed(2);
      const tempoMinutos = Math.floor(tempoTotal / 60);
      
      // N√∫mero de paradas
      const numParadas = request && request.waypoints ? request.waypoints.length : waypointOrder.length;
      
      // Armazenar m√©tricas baseadas no tipo de rota
      const metricas = {
        distancia: parseFloat(distanciaKm),
        tempo: tempoMinutos,
        paradas: numParadas,
        timestamp: new Date().getTime()
      };
      
      if (tipoRota === 'visualizar') {
        // Armazenar como m√©tricas normais
        metricasNormal = metricas;
        
        // Determinar a ordem original
        rotaOriginal = determinaOrdemPontos(legs);
        
        console.log("üßÆ [CalculoPreciso] M√©tricas normais capturadas:", metricasNormal);
      } else if (tipoRota === 'otimizar') {
        // Armazenar como m√©tricas otimizadas
        metricasOtimizada = metricas;
        
        // Determinar a ordem otimizada
        rotaOtimizada = determinaOrdemPontos(legs);
        
        console.log("üßÆ [CalculoPreciso] M√©tricas otimizadas capturadas:", metricasOtimizada);
      }
      
      // Atualizar as informa√ß√µes exibidas
      atualizarInformacoesRota(tipoRota);
    } catch (erro) {
      console.log("üßÆ [CalculoPreciso] Erro ao processar resultado:", erro);
    }
  }
  
  // Determinar a ordem dos pontos a partir das pernas da rota
  function determinaOrdemPontos(legs) {
    if (!legs || !legs.length) return [];
    
    const pontos = [];
    
    // Adicionar o primeiro ponto (origem)
    pontos.push(legs[0].start_location);
    
    // Adicionar os pontos intermedi√°rios e finais
    legs.forEach(leg => {
      pontos.push(leg.end_location);
    });
    
    return pontos;
  }
  
  // Atualizar informa√ß√µes de rota no DOM
  function atualizarInformacoesRota(tipo) {
    // Encontrar o elemento de informa√ß√µes de rota
    const infoRota = document.getElementById('route-info');
    if (!infoRota) {
      console.log("üßÆ [CalculoPreciso] Elemento de informa√ß√µes n√£o encontrado");
      return;
    }
    
    // Verificar qual tipo de rota usar
    if (tipo === 'otimizar' && metricasNormal && metricasOtimizada) {
      // Comparar rotas
      atualizarComparacao(infoRota, metricasNormal, metricasOtimizada);
    }
  }
  
  // Atualizar a compara√ß√£o entre rotas
  function atualizarComparacao(elemento, normal, otimizada) {
    // Calcular diferen√ßas
    const difDistancia = normal.distancia - otimizada.distancia;
    const difTempo = normal.tempo - otimizada.tempo;
    const percentDistancia = (difDistancia / normal.distancia * 100).toFixed(1);
    const percentTempo = (difTempo / normal.tempo * 100).toFixed(1);
    
    // Verificar se j√° existe compara√ß√£o
    let comparacao = elemento.querySelector('.route-comparison');
    
    if (!comparacao) {
      // Criar elemento para a compara√ß√£o
      comparacao = document.createElement('div');
      comparacao.className = 'route-comparison';
      comparacao.style.marginTop = '15px';
      comparacao.style.paddingTop = '10px';
      comparacao.style.borderTop = '1px solid #ddd';
      elemento.appendChild(comparacao);
    }
    
    // Atualizar conte√∫do
    comparacao.innerHTML = `
      <p><strong>Compara√ß√£o com rota n√£o otimizada:</strong></p>
      <p>Dist√¢ncia: <span style="color: ${difDistancia > 0 ? '#4CAF50' : '#F44336'}">
        ${difDistancia > 0 ? 'Economia' : 'Aumento'} de ${Math.abs(difDistancia).toFixed(2)} km (${Math.abs(percentDistancia)}%)
      </span></p>
      <p>Tempo: <span style="color: ${difTempo > 0 ? '#4CAF50' : '#F44336'}">
        ${difTempo > 0 ? 'Economia' : 'Aumento'} de ${formatarTempo(Math.abs(difTempo))} (${Math.abs(percentTempo)}%)
      </span></p>
      <p style="font-style: italic; font-size: 12px; margin-top: 10px;">
        Os valores mostrados usam o mesmo m√©todo de c√°lculo da rota normal para garantir precis√£o na compara√ß√£o.
      </p>
    `;
  }
  
  // Formatar tempo para exibi√ß√£o
  function formatarTempo(minutos) {
    const horas = Math.floor(minutos / 60);
    const min = minutos % 60;
    
    if (horas === 0) {
      return `${min} minutos`;
    } else if (min === 0) {
      return `${horas} hora${horas !== 1 ? 's' : ''}`;
    } else {
      return `${horas}h ${min}min`;
    }
  }
  
  // Observar mudan√ßas nas informa√ß√µes de rota
  function observarInformacoesRota() {
    const infoContainer = document.getElementById('bottom-info');
    
    if (!infoContainer) {
      console.log("üßÆ [CalculoPreciso] Container de informa√ß√µes n√£o encontrado");
      return;
    }
    
    // Criar observer
    const observer = new MutationObserver(mutations => {
      for (const mutation of mutations) {
        if (mutation.type === 'childList' || mutation.type === 'subtree') {
          // Verificar se cont√©m "Rota Otimizada"
          const infoRota = document.getElementById('route-info');
          if (infoRota && infoRota.innerHTML.includes('Rota Otimizada')) {
            // Atualizar informa√ß√µes como rota otimizada
            setTimeout(() => {
              window.tipoRotaAtual = 'otimizar';
              atualizarInformacoesRota('otimizar');
            }, 500);
          }
        }
      }
    });
    
    // Iniciar observa√ß√£o
    observer.observe(infoContainer, { 
      childList: true, 
      subtree: true,
      characterData: true 
    });
    
    console.log("üßÆ [CalculoPreciso] Observer configurado");
  }
})();