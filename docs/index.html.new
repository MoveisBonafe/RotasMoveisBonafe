<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <base href="./">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Planejador de Rotas - Versão GitHub Pages</title>
  <style>
    /* Reset e estilos básicos */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: #333;
      background-color: #f9fafb;
      height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    header {
      background-color: #ffffff;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      padding: 1rem;
    }
    
    .logo {
      display: flex;
      align-items: center;
    }
    
    .logo svg {
      width: 40px;
      height: 40px;
      margin-right: 10px;
      color: #3b82f6;
    }
    
    .logo-text h1 {
      font-size: 1.5rem;
      font-weight: bold;
      color: #3b82f6;
    }
    
    .logo-text p {
      font-size: 0.75rem;
      color: #6b7280;
    }
    
    main {
      flex: 1;
      display: flex;
      flex-direction: column;
      padding: 1rem;
      overflow: hidden;
    }
    
    .app-container {
      display: flex;
      flex: 1;
      overflow: hidden;
    }
    
    .sidebar {
      width: 300px;
      background-color: #ffffff;
      border-radius: 0.5rem;
      padding: 1rem;
      margin-right: 1rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      overflow-y: auto;
      height: 100%;
    }
    
    .sidebar h2 {
      font-size: 1.1rem;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .location-list {
      list-style: none;
    }
    
    .location-item {
      display: flex;
      align-items: center;
      padding: 0.75rem;
      border-radius: 0.25rem;
      margin-bottom: 0.5rem;
      background-color: #f3f4f6;
    }
    
    .location-marker {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background-color: #3b82f6;
      color: white;
      font-weight: bold;
      font-size: 0.8rem;
      margin-right: 0.75rem;
      flex-shrink: 0;
    }
    
    .location-info {
      flex: 1;
    }
    
    .location-name {
      font-weight: 500;
      margin-bottom: 0.25rem;
    }
    
    .location-address {
      font-size: 0.8rem;
      color: #6b7280;
    }
    
    /* Estilos para os botões de remoção */
    .remove-btn {
      background: none;
      border: none;
      color: #ef4444;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0.25rem;
      border-radius: 50%;
      margin-left: 0.5rem;
    }
    
    .remove-btn:hover {
      background-color: #fee2e2;
    }
    
    /* Estilos para filtros de data */
    .date-filter {
      margin-bottom: 1.5rem;
      padding: 0.75rem;
      background-color: #f3f4f6;
      border-radius: 0.25rem;
    }
    
    .date-group {
      margin-bottom: 0.5rem;
    }
    
    .date-group label {
      display: block;
      font-size: 0.8rem;
      margin-bottom: 0.25rem;
      color: #4b5563;
    }
    
    .date-input {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid #d1d5db;
      border-radius: 0.25rem;
      font-size: 0.875rem;
    }
    
    /* Estilos para adicionar destino */
    .add-location, .import-ceps {
      margin-bottom: 1.5rem;
      padding: 0.75rem;
      background-color: #f3f4f6;
      border-radius: 0.25rem;
    }
    
    .add-location h3, .import-ceps h3 {
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
      color: #374151;
    }
    
    .location-search {
      display: flex;
      gap: 0.5rem;
    }
    
    .location-input {
      flex: 1;
      padding: 0.5rem;
      border: 1px solid #d1d5db;
      border-radius: 0.25rem;
      font-size: 0.875rem;
    }
    
    .action-btn {
      display: flex;
      align-items: center;
      gap: 0.25rem;
      padding: 0.5rem 0.75rem;
      background-color: #3b82f6;
      color: white;
      border: none;
      border-radius: 0.25rem;
      font-size: 0.875rem;
      cursor: pointer;
    }
    
    .action-btn:hover {
      background-color: #2563eb;
    }
    
    /* Estilos para importação de arquivo */
    .file-upload {
      margin-bottom: 0.5rem;
    }
    
    .file-label {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 0.75rem;
      background-color: #e5e7eb;
      color: #4b5563;
      border-radius: 0.25rem;
      font-size: 0.875rem;
      cursor: pointer;
      width: fit-content;
    }
    
    .file-label:hover {
      background-color: #d1d5db;
    }
    
    #file-upload {
      display: none;
    }
    
    .file-info {
      font-size: 0.75rem;
      color: #6b7280;
      margin-top: 0.25rem;
    }
    
    .optimize-container {
      margin-top: 1rem;
      text-align: center;
    }
    
    .optimize-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      width: 100%;
      padding: 0.75rem;
      background-color: #3b82f6;
      color: white;
      border: none;
      border-radius: 0.25rem;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    
    .optimize-btn:hover {
      background-color: #2563eb;
    }
    
    .map-container {
      flex: 1;
      border-radius: 0.5rem;
      overflow: hidden;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      background-color: #ffffff;
      display: flex;
      flex-direction: column;
      height: 100%;
    }
    
    .map-header {
      padding: 0.75rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .map-title {
      font-weight: 500;
    }
    
    .map-actions {
      display: flex;
      gap: 0.5rem;
    }
    
    .map-btn {
      padding: 0.5rem 1rem;
      border-radius: 0.25rem;
      font-weight: 500;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      border: none;
      font-size: 0.875rem;
    }
    
    .primary-btn {
      background-color: #3b82f6;
      color: white;
    }
    
    .secondary-btn {
      background-color: #e5e7eb;
      color: #4b5563;
    }
    
    .info-btn {
      background-color: #10b981;
      color: white;
    }
    
    .map-iframe {
      flex: 1;
      border: none;
      width: 100%;
      height: 100%;
    }
    
    /* Abas de resumo/relatório abaixo do mapa */
    .route-tabs {
      margin-top: 1rem;
      background-color: #ffffff;
      border-radius: 0.5rem;
      overflow: hidden;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .tabs-header {
      display: flex;
      border-bottom: 1px solid #e5e7eb;
    }
    
    .tab-btn {
      flex: 1;
      padding: 0.75rem;
      text-align: center;
      background-color: #f9fafb;
      border: none;
      font-size: 0.875rem;
      font-weight: 500;
      cursor: pointer;
      color: #6b7280;
    }
    
    .tab-btn.active {
      background-color: #ffffff;
      color: #3b82f6;
      border-bottom: 2px solid #3b82f6;
    }
    
    .tab-content {
      display: none;
      padding: 1rem;
    }
    
    .tab-content.active {
      display: block;
    }
    
    .route-summary {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1rem;
    }
    
    .summary-item {
      background-color: #f3f4f6;
      padding: 1rem;
      border-radius: 0.25rem;
    }
    
    .summary-label {
      font-size: 0.875rem;
      color: #4b5563;
      margin-bottom: 0.25rem;
    }
    
    .summary-value {
      font-size: 1.25rem;
      font-weight: 600;
      color: #111827;
    }
    
    .route-report h3 {
      font-size: 1rem;
      margin-bottom: 1rem;
      color: #374151;
    }
    
    .route-points {
      margin-bottom: 1.5rem;
    }
    
    .route-report h4 {
      font-size: 0.875rem;
      margin-bottom: 0.5rem;
      color: #4b5563;
    }
    
    .attention-points {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 0.5rem;
    }
    
    .attention-item {
      display: flex;
      align-items: center;
      padding: 0.75rem;
      background-color: #f9fafb;
      border-radius: 0.25rem;
      border: 1px solid #e5e7eb;
    }
    
    .attention-icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      margin-right: 0.75rem;
    }
    
    .toll {
      background-color: #fef3c7;
      color: #d97706;
    }
    
    .weighing {
      background-color: #e0e7ff;
      color: #4f46e5;
    }
    
    .attention-text {
      font-size: 0.875rem;
      color: #374151;
    }
    
    .route-sequence {
      margin-top: 1.5rem;
    }
    
    .sequence-list {
      margin-left: 1.5rem;
    }
    
    .sequence-list li {
      margin-bottom: 0.5rem;
      font-size: 0.875rem;
      color: #374151;
    }
    
    /* Responsive styles */
    @media (max-width: 768px) {
      .app-container {
        flex-direction: column;
      }
      
      .sidebar {
        width: 100%;
        margin-right: 0;
        margin-bottom: 1rem;
        max-height: 300px;
      }
      
      .map-container {
        height: 400px;
      }
      
      .route-summary {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <header>
    <div class="logo">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"></path>
      </svg>
      <div class="logo-text">
        <h1>Otimizador de Rotas</h1>
        <p>Planejamento de entregas a partir de Dois Córregos-SP</p>
      </div>
    </div>
  </header>

  <main>
    <div class="app-container">
      <aside class="sidebar">
        <h2>Destinos</h2>
        
        <!-- Filtros de data -->
        <div class="date-filter">
          <div class="date-group">
            <label for="start-date">Data Início:</label>
            <input type="date" id="start-date" class="date-input">
          </div>
          <div class="date-group">
            <label for="end-date">Data Fim:</label>
            <input type="date" id="end-date" class="date-input">
          </div>
        </div>
        
        <!-- Adicionar destino -->
        <div class="add-location">
          <h3>Adicionar Destino</h3>
          <div class="location-search">
            <input 
              type="text" 
              id="location-search-input" 
              placeholder="Digite um endereço ou CEP..." 
              class="location-input">
            <button id="add-location-btn" class="action-btn">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="16"></line>
                <line x1="8" y1="12" x2="16" y2="12"></line>
              </svg>
              Adicionar
            </button>
          </div>
        </div>
        
        <!-- Importar CEPs -->
        <div class="import-ceps">
          <h3>Importar Endereços</h3>
          <div class="file-upload">
            <label for="file-upload" class="file-label">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                <polyline points="17 8 12 3 7 8"></polyline>
                <line x1="12" y1="3" x2="12" y2="15"></line>
              </svg>
              Selecionar arquivo
            </label>
            <input type="file" id="file-upload" accept=".txt,.csv">
          </div>
          <p class="file-info">Formato: CEP,nome (txt ou csv)</p>
        </div>
        
        <h3>Lista de Destinos</h3>
        <ul class="location-list">
          <li class="location-item origin">
            <div class="location-marker" style="background-color: #2563eb;">A</div>
            <div class="location-info">
              <div class="location-name">Dois Córregos</div>
              <div class="location-address">Dois Córregos, SP, Brasil</div>
            </div>
          </li>
          <!-- Outros destinos serão adicionados aqui pelo usuário -->
        </ul>
        
        <!-- Botão de otimização de rota -->
        <div class="optimize-container">
          <button class="optimize-btn" id="optimize-btn">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
            Otimizar Rota
          </button>
        </div>
      </aside>

      <div class="map-container">
        <div class="map-header">
          <div class="map-title">Visualização do Mapa</div>
          <div class="map-actions">
            <button class="map-btn secondary-btn" id="home-btn">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                <polyline points="9 22 9 12 15 12 15 22"></polyline>
              </svg>
              Inicio
            </button>
            <button class="map-btn info-btn" id="show-info-btn">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="16" x2="12" y2="12"></line>
                <line x1="12" y1="8" x2="12.01" y2="8"></line>
              </svg>
              Detalhes
            </button>
          </div>
        </div>
        
        <!-- Iframe do Google Maps com ponto de origem -->
        <iframe 
          class="map-iframe"
          src="https://www.google.com/maps/embed/v1/place?key=AIzaSyCnallnTQ8gT2_F600vt-yAEv2BoH0mj7U&q=-22.3673,-48.3823&zoom=10"
          allowfullscreen>
        </iframe>
      </div>
    </div>
    
    <!-- Painel de informações da rota (abaixo do mapa) -->
    <div class="route-tabs" id="route-tabs">
      <div class="tabs-header">
        <button class="tab-btn active" data-tab="summary">Resumo da Rota</button>
        <button class="tab-btn" data-tab="report">Relatório</button>
      </div>
      
      <div class="tab-content active" id="summary-tab">
        <div class="route-summary">
          <div class="summary-item">
            <div class="summary-label">Distância Total:</div>
            <div class="summary-value">305 km</div>
          </div>
          <div class="summary-item">
            <div class="summary-label">Tempo Estimado:</div>
            <div class="summary-value">4h 15min</div>
          </div>
          <div class="summary-item">
            <div class="summary-label">Pedágios:</div>
            <div class="summary-value">3</div>
          </div>
          <div class="summary-item">
            <div class="summary-label">Balanças:</div>
            <div class="summary-value">2</div>
          </div>
        </div>
      </div>
      
      <div class="tab-content" id="report-tab">
        <div class="route-report">
          <h3>Relatório Detalhado</h3>
          <div class="route-points">
            <h4>Pontos de Atenção</h4>
            <div class="attention-points">
              <div class="attention-item">
                <div class="attention-icon toll">
                  <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <line x1="12" y1="8" x2="12" y2="12"></line>
                    <line x1="12" y1="16" x2="12.01" y2="16"></line>
                  </svg>
                </div>
                <div class="attention-text">Pedágio SP-225 (Brotas)</div>
              </div>
              <div class="attention-item">
                <div class="attention-icon toll">
                  <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <line x1="12" y1="8" x2="12" y2="12"></line>
                    <line x1="12" y1="16" x2="12.01" y2="16"></line>
                  </svg>
                </div>
                <div class="attention-text">Pedágio SP-310 (Jaú)</div>
              </div>
              <div class="attention-item">
                <div class="attention-icon weighing">
                  <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect>
                    <path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path>
                  </svg>
                </div>
                <div class="attention-text">Balança Rod. Marechal Rondon (Bauru)</div>
              </div>
            </div>
          </div>
          
          <div class="route-sequence">
            <h4>Sequência da Rota</h4>
            <ol class="sequence-list">
              <li>Dois Córregos (Origem)</li>
              <li>Jaú - 26 km</li>
              <li>Bauru - 45 km</li>
              <li>Ribeirão Preto - 180 km</li>
              <li>Dois Córregos (Retorno) - 54 km</li>
            </ol>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    // Script para versão estática mais completa
    document.addEventListener('DOMContentLoaded', function() {
      // Configuração da API Google Maps
      const apiKey = "AIzaSyCnallnTQ8gT2_F600vt-yAEv2BoH0mj7U";
      
      // Referências dos elementos
      const optimizeBtn = document.getElementById('optimize-btn');
      const homeBtn = document.getElementById('home-btn');
      const infoBtn = document.getElementById('show-info-btn');
      const locationInput = document.getElementById('location-search-input');
      const addLocationBtn = document.getElementById('add-location-btn');
      const fileUpload = document.getElementById('file-upload');
      const locationList = document.querySelector('.location-list');
      const removeButtons = document.querySelectorAll('.remove-btn');
      const startDateInput = document.getElementById('start-date');
      const endDateInput = document.getElementById('end-date');
      const tabButtons = document.querySelectorAll('.tab-btn');
      const tabContents = document.querySelectorAll('.tab-content');
      const routeTabs = document.getElementById('route-tabs');
      
      // Ocultar abas de rota inicialmente
      routeTabs.style.display = 'none';
      
      // Inicializar datas com valores padrão
      const today = new Date();
      const todayStr = today.toISOString().split('T')[0];
      const nextWeek = new Date(today);
      nextWeek.setDate(today.getDate() + 7);
      const nextWeekStr = nextWeek.toISOString().split('T')[0];
      
      startDateInput.value = todayStr;
      endDateInput.value = nextWeekStr;
      
      // Contagem de locais adicionados
      let locationCounter = 0; // Começando com 0 já que temos apenas a origem
      
      // Coordenadas dos locais iniciais
      const locations = [
        { id: 'origin', name: 'Dois Córregos', latlng: '-22.3673,-48.3823', isOrigin: true }
      ];
      
      // Funções auxiliares
      function buildDirectionsUrl() {
        // Organizar waypoints
        const origin = locations.find(l => l.isOrigin).latlng;
        const destination = origin; // Rota circular, retorna à origem
        
        // Filtrar waypoints (não incluir origem)
        const waypoints = locations
          .filter(l => !l.isOrigin)
          .map(l => l.latlng)
          .join('|');
        
        return `https://www.google.com/maps/embed/v1/directions?key=${apiKey}&origin=${origin}&destination=${origin}&waypoints=${waypoints}&mode=driving&avoid=ferries`;
      }
      
      function buildPlaceUrl() {
        const origin = locations.find(l => l.isOrigin).latlng;
        return `https://www.google.com/maps/embed/v1/place?key=${apiKey}&q=${origin}&zoom=10`;
      }
      
      function toggleTabs(show) {
        routeTabs.style.display = show ? 'block' : 'none';
      }
      
      function switchTab(tabId) {
        tabButtons.forEach(btn => {
          if (btn.getAttribute('data-tab') === tabId) {
            btn.classList.add('active');
          } else {
            btn.classList.remove('active');
          }
        });
        
        tabContents.forEach(content => {
          if (content.id === tabId + '-tab') {
            content.classList.add('active');
          } else {
            content.classList.remove('active');
          }
        });
      }
      
      function createLocationItem(name, address, id, isOrigin = false) {
        const li = document.createElement('li');
        li.className = 'location-item';
        if (isOrigin) {
          li.classList.add('origin');
        }
        
        const marker = document.createElement('div');
        marker.className = 'location-marker';
        if (isOrigin) {
          marker.style.backgroundColor = '#2563eb';
          marker.textContent = 'A';
        } else {
          marker.textContent = id;
        }
        
        const info = document.createElement('div');
        info.className = 'location-info';
        
        const nameDiv = document.createElement('div');
        nameDiv.className = 'location-name';
        nameDiv.textContent = name;
        
        const addressDiv = document.createElement('div');
        addressDiv.className = 'location-address';
        addressDiv.textContent = address;
        
        info.appendChild(nameDiv);
        info.appendChild(addressDiv);
        
        li.appendChild(marker);
        li.appendChild(info);
        
        // Adicionar botão de remoção (exceto para a origem)
        if (!isOrigin) {
          const removeBtn = document.createElement('button');
          removeBtn.className = 'remove-btn';
          removeBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          `;
          removeBtn.addEventListener('click', function() {
            // Remover o item da lista visual e do array de locais
            li.remove();
            const index = locations.findIndex(l => l.id === id);
            if (index !== -1) {
              locations.splice(index, 1);
            }
          });
          li.appendChild(removeBtn);
        }
        
        return li;
      }
      
      // Função para adicionar destino
      function addLocation() {
        const address = locationInput.value.trim();
        if (!address) return;
        
        // Simular a adição de um local (em um app real usaríamos geocoding)
        locationCounter++;
        const newLocation = {
          id: locationCounter,
          name: address,
          latlng: '-22.3,-48.5', // Exemplo de coordenadas
          isOrigin: false
        };
        
        locations.push(newLocation);
        const li = createLocationItem(address, `Localização ${locationCounter}`, locationCounter);
        locationList.appendChild(li);
        
        // Limpar o campo de entrada
        locationInput.value = '';
      }
      
      // Função para importar arquivo de CEPs
      function handleFileUpload(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = function(e) {
          const content = e.target.result;
          const lines = content.split('\n');
          
          // Array para armazenar os dados
          const importedLocations = [];
          
          // Processar cada linha do arquivo
          lines.forEach((line, index) => {
            const parts = line.split(',');
            if (parts.length >= 2) {
              const cep = parts[0].trim();
              const name = parts[1].trim();
              
              // Simulação de coordenadas para este CEP
              // Em um app real, usaríamos uma API de geocodificação
              locationCounter++;
              
              // Criar localização com CEP e nome da linha
              const newLocation = {
                id: locationCounter,
                name: name,
                address: `CEP: ${cep}`,
                latlng: `-22.${Math.floor(Math.random() * 9)},-48.${Math.floor(Math.random() * 9)}`,
                isOrigin: false
              };
              
              // Adicionar à lista de localizações
              locations.push(newLocation);
              importedLocations.push(newLocation);
              
              // Criar item visual
              const li = createLocationItem(name, `CEP: ${cep}`, locationCounter);
              locationList.appendChild(li);
            }
          });
          
          // Informar ao usuário
          if (importedLocations.length > 0) {
            alert(`Importado com sucesso! ${importedLocations.length} endereços adicionados.`);
          } else {
            alert('Nenhum endereço válido encontrado no arquivo.');
          }
          
          // Limpar o input de arquivo
          event.target.value = '';
        };
        
        reader.readAsText(file);
      }
      
      // Função para calcular a rota otimizada
      function calculateOptimizedRoute() {
        if (locations.length <= 1) {
          alert('Adicione pelo menos um destino além da origem para calcular uma rota.');
          return;
        }
        
        // Atualizar o iframe com a rota
        const iframe = document.querySelector('.map-iframe');
        iframe.src = buildDirectionsUrl();
        
        // Atualizar sequência da rota
        updateRouteSequence();
        
        // Mostrar painéis de informação
        toggleTabs(true);
      }
      
      // Função para atualizar a sequência da rota
      function updateRouteSequence() {
        const sequenceList = document.querySelector('.sequence-list');
        sequenceList.innerHTML = '';
        
        // Adicionar origem
        const origin = locations.find(l => l.isOrigin);
        const li1 = document.createElement('li');
        li1.textContent = `${origin.name} (Origem)`;
        sequenceList.appendChild(li1);
        
        // Adicionar destinos em ordem otimizada
        const destinations = locations.filter(l => !l.isOrigin);
        
        // Simular reordenação dos destinos
        const shuffled = [...destinations].sort(() => Math.random() - 0.5);
        
        shuffled.forEach((location, index) => {
          const li = document.createElement('li');
          const distance = Math.floor(Math.random() * 100) + 20;
          li.textContent = `${location.name} - ${distance} km`;
          sequenceList.appendChild(li);
        });
        
        // Adicionar retorno à origem
        const li2 = document.createElement('li');
        li2.textContent = `${origin.name} (Retorno) - ${Math.floor(Math.random() * 50) + 30} km`;
        sequenceList.appendChild(li2);
        
        // Atualizar valores de resumo
        const summaryValues = document.querySelectorAll('.summary-value');
        summaryValues[0].textContent = `${Math.floor(Math.random() * 200) + 100} km`;
        summaryValues[1].textContent = `${Math.floor(Math.random() * 5) + 2}h ${Math.floor(Math.random() * 45) + 10}min`;
        summaryValues[2].textContent = `${Math.floor(Math.random() * 3) + 1}`;
        summaryValues[3].textContent = `${Math.floor(Math.random() * 2) + 1}`;
      }
      
      // Inicialização de autocompletar endereços
      function initializeAutocomplete() {
        if (window.google && google.maps && google.maps.places) {
          const autocomplete = new google.maps.places.Autocomplete(locationInput, { 
            types: ['geocode'],
            componentRestrictions: { country: 'br' }
          });
          
          autocomplete.addListener('place_changed', function() {
            const place = autocomplete.getPlace();
            if (place.geometry) {
              locationCounter++;
              
              const newLocation = {
                id: locationCounter,
                name: place.name,
                address: place.formatted_address,
                latlng: `${place.geometry.location.lat()},${place.geometry.location.lng()}`,
                isOrigin: false
              };
              
              locations.push(newLocation);
              const li = createLocationItem(place.name, place.formatted_address, locationCounter);
              locationList.appendChild(li);
              
              // Limpar o campo
              locationInput.value = '';
            }
          });
        }
      }
      
      // Event listeners
      optimizeBtn.addEventListener('click', calculateOptimizedRoute);
      
      homeBtn.addEventListener('click', function() {
        // Retornar para visualização inicial
        const iframe = document.querySelector('.map-iframe');
        iframe.src = buildPlaceUrl();
        
        // Esconder painel de informações
        toggleTabs(false);
      });
      
      infoBtn.addEventListener('click', function() {
        // Alternar visibilidade das abas
        toggleTabs(routeTabs.style.display === 'none');
      });
      
      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          switchTab(this.getAttribute('data-tab'));
        });
      });
      
      addLocationBtn.addEventListener('click', addLocation);
      
      locationInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          addLocation();
        }
      });
      
      fileUpload.addEventListener('change', handleFileUpload);
      
      // Carregamento da API do Google Maps para autocomplete
      function loadGoogleMapsScript() {
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&callback=initAutocomplete`;
        script.async = true;
        script.defer = true;
        document.head.appendChild(script);
        
        // Definir função de callback global
        window.initAutocomplete = initializeAutocomplete;
      }
      
      // Carregar script do Google Maps para autocomplete
      loadGoogleMapsScript();
      
      // Ocultar abas inicialmente
      toggleTabs(false);
    });
  </script>
</body>
</html>