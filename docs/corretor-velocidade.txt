// CORRETOR DE TEMPO PARA VELOCIDADE MÉDIA DE 90 KM/H
// Cole esse código no console do navegador (F12) após a página carregar
// e após calcular uma rota

// Configuração
const VELOCIDADE_MEDIA = 90; // km/h
let rotaNormal = null;

// Monitorar informações de rota
function corrigirTempoRota() {
  const infoRota = document.getElementById('route-info');
  if (!infoRota) return;
  
  // Extrair distância
  const matchDistancia = infoRota.innerHTML.match(/Distância total:<\/strong>\s*(\d+[.,]\d+)\s*km/i);
  if (!matchDistancia) return;
  
  // Converter para número
  const distanciaKm = parseFloat(matchDistancia[1].replace(',', '.'));
  
  // Calcular tempo com velocidade média
  const tempoHoras = distanciaKm / VELOCIDADE_MEDIA;
  const horasInt = Math.floor(tempoHoras);
  const minutosInt = Math.round((tempoHoras - horasInt) * 60);
  
  console.log(`Rota: ${distanciaKm} km = ${horasInt}h ${minutosInt}min a ${VELOCIDADE_MEDIA} km/h`);
  
  // Salvar rota atual
  const rotaAtual = {
    distancia: distanciaKm,
    tempo: tempoHoras,
    tipo: infoRota.innerHTML.includes('Rota Otimizada') ? 'otimizada' : 'normal'
  };
  
  // Salvar como rota normal se apropriado
  if (rotaAtual.tipo === 'normal') {
    rotaNormal = rotaAtual;
  }
  
  // Substituir o tempo no HTML
  let novoHTML = infoRota.innerHTML.replace(
    /Tempo estimado:<\/strong>\s*(\d+)h\s*(\d+)min/i,
    `Tempo estimado:</strong> ${horasInt}h ${minutosInt}min (${VELOCIDADE_MEDIA} km/h)`
  );
  
  // Adicionar comparação se for rota otimizada
  if (rotaAtual.tipo === 'otimizada' && rotaNormal) {
    // Calcular diferenças
    const difDistancia = rotaNormal.distancia - rotaAtual.distancia;
    const difTempo = rotaNormal.tempo - rotaAtual.tempo;
    
    // Calcular percentuais
    const percentDistancia = (difDistancia / rotaNormal.distancia * 100).toFixed(1);
    const percentTempo = (difTempo / rotaNormal.tempo * 100).toFixed(1);
    
    // Determinar texto e cor
    const corDistancia = difDistancia > 0 ? '#4CAF50' : '#F44336';
    const corTempo = difTempo > 0 ? '#4CAF50' : '#F44336';
    const textoDistancia = difDistancia > 0 ? 'Economia' : 'Aumento';
    const textoTempo = difTempo > 0 ? 'Economia' : 'Aumento';
    
    // Formatar tempo
    const horasDif = Math.floor(Math.abs(difTempo));
    const minutosDif = Math.round((Math.abs(difTempo) - horasDif) * 60);
    const tempoFormatado = horasDif > 0 ? 
                          `${horasDif}h ${minutosDif}min` : 
                          `${minutosDif} minutos`;
    
    // Adicionar comparação ao HTML
    novoHTML += `
      <div class="route-comparison" style="margin-top: 15px; padding-top: 10px; border-top: 1px solid #ddd;">
        <p><strong>Comparação com rota não otimizada:</strong></p>
        <p>Distância: <span style="color: ${corDistancia}">
          ${textoDistancia} de ${Math.abs(difDistancia).toFixed(1)} km (${Math.abs(percentDistancia)}%)
        </span></p>
        <p>Tempo: <span style="color: ${corTempo}">
          ${textoTempo} de ${tempoFormatado} (${Math.abs(percentTempo)}%)
        </span></p>
        <p style="font-style: italic; font-size: 12px; margin-top: 8px;">
          Cálculos baseados em velocidade média de ${VELOCIDADE_MEDIA} km/h.
        </p>
      </div>
    `;
  }
  
  // Atualizar o HTML
  infoRota.innerHTML = novoHTML;
}

// Interceptar botões
function interceptarBotoes() {
  const botaoVisualizar = document.getElementById('visualize-button');
  const botaoOtimizar = document.getElementById('optimize-button');
  
  if (botaoVisualizar) {
    const clickOriginalV = botaoVisualizar.onclick;
    botaoVisualizar.onclick = function(event) {
      if (clickOriginalV) clickOriginalV.call(this, event);
      setTimeout(corrigirTempoRota, 1000);
      setTimeout(corrigirTempoRota, 2000);
    };
    console.log("Botão Visualizar interceptado");
  }
  
  if (botaoOtimizar) {
    const clickOriginalO = botaoOtimizar.onclick;
    botaoOtimizar.onclick = function(event) {
      if (clickOriginalO) clickOriginalO.call(this, event);
      setTimeout(corrigirTempoRota, 1000);
      setTimeout(corrigirTempoRota, 2000);
    };
    console.log("Botão Otimizar interceptado");
  }
}

// Iniciar correção
interceptarBotoes();
corrigirTempoRota(); // Corrigir valores atuais (se existirem)
console.log("Sistema de correção de tempo ativado! Velocidade média: " + VELOCIDADE_MEDIA + " km/h");
alert("Sistema de correção de tempo ativado!\nAgora todas as rotas usarão velocidade média de " + VELOCIDADE_MEDIA + " km/h");

// Configurar MutationObserver para atualização automática
const observer = new MutationObserver(mutations => {
  for (const mutation of mutations) {
    if (mutation.type === 'childList' || mutation.type === 'characterData') {
      const infoRota = document.getElementById('route-info');
      if (infoRota) {
        corrigirTempoRota();
      }
    }
  }
});

const container = document.getElementById('bottom-info');
if (container) {
  observer.observe(container, {
    childList: true,
    subtree: true,
    characterData: true
  });
  console.log("Observer configurado para atualizações automáticas");
}